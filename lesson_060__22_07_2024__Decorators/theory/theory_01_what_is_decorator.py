"""ДЕКОРАТОР - это callable-объект, который принимают
другой callable объект  (функция или метод) в качестве аргумента,
добавляют к нему некоторую функциональность
и возвращают callable-объект с дополненной функциональностью.

ВАЖНО: декоратор НЕ ИЗМЕНЯЕТ исходный callable-объект, а ДОПОЛНЯЕТ его.

Существуют 4 вида декораторов:
1. @func for function
2. @func for class
3. @class for function
4. @class for class

Мы попробуем рассмотреть только первый вид: @func for function
"""


def some_func():
    print('Something useful...')


# Предположим, у нас есть НЕСКОЛЬКО функций, до и после которых
# надо вывести *************************************************


def decorator(func):
    print(50 * '*')
    func()
    print(50 * '*')


decorator(some_func)

# НЕДОСТАТОК:
# этот декоратор сразу же ИСПОЛНЯЕТ функцию some_func,
# а должен её ВОЗВРАЩАТЬ, чтобы можно было бы выполнить её
# в любой удобный момент, а не прямо сейчас.

print(type(decorator(some_func)))  # <class 'NoneType'>
# то есть возвращает None, а должен возвращать Callable object
